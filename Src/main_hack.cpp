/****************************************************************************************
* File: main_hack.cpp
*
* Description: Configures and starts the Quadcopter
* main.c is generated by STM32CubeMX, so we need the actual main file to be named differently
*
* Created by Matt Olson
****************************************************************************************/

/*---------------------------------------------------------------------------------------
*                                       INCLUDES
*--------------------------------------------------------------------------------------*/
#include <cstdio>

#include "main.h"
#include "led.h"
#include "Sensors/hal.h"

/*---------------------------------------------------------------------------------------
*                                   LITERAL CONSTANTS
*--------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------------------
*                                        TYPES
*--------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------------------
*                                   MEMORY CONSTANTS
*--------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------------------
*                                      VARIABLES
*--------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------------------
*                                     PROCEDURES
*--------------------------------------------------------------------------------------*/

/*****************************************************************************
* Function: delay
*
* Description: Busy waits for a set number of miliseconds
*****************************************************************************/
void delay(uint32_t ms)
{
    uint32_t endTick = HAL_GetTick() + ms;
    while (endTick > HAL_GetTick())
    {
        asm("nop");
    }
}

/*****************************************************************************
* Function: main
*
* Description: The main loop of the quadcopter
*****************************************************************************/
static int32_t i2c_write(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
    I2C_HandleTypeDef* i2cHandle = (I2C_HandleTypeDef*)handle;

    return (int32_t)HAL_I2C_Mem_Write(i2cHandle, LSM303AGR_I2C_ADD_XL | 0b1, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
}

static int32_t i2c_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
    I2C_HandleTypeDef* i2cHandle = (I2C_HandleTypeDef*)handle;

    return (int32_t)HAL_I2C_Mem_Read(i2cHandle, LSM303AGR_I2C_ADD_XL & ~0b1, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
}
#include "Sensors/lsm303agr.h"
#include <cstring>
float X, Y, Z;
static int read_data(lsm303agr* a, stmdev_ctx_t* m_sensor)
{
    int16_t raw_data[3];
    memset(raw_data, 0x00, 3 * sizeof(int16_t));
    a->acceleration_raw_get(m_sensor, raw_data);

    X = a->from_fs_2g_nm_to_mg(raw_data[0]);
    Y = a->from_fs_2g_nm_to_mg(raw_data[1]);
    Z = a->from_fs_2g_nm_to_mg(raw_data[2]);
    return 0;
}


int main(void)
{
    stmdev_ctx_t m_sensor;
    m_sensor.write_reg = i2c_write;
    m_sensor.read_reg = i2c_read;
    m_sensor.handle = (void*)&hi2c1;
    lsm303agr accel;

    /* MCU Configuration--------------------------------------------------------*/
    InitHardware();

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();

    /* Initialize all configured peripherals */
    //accelerometer->Init();

    accel.xl_data_rate_set(&m_sensor, lsm303agr::LSM303AGR_XL_ODR_200Hz);
    accel.xl_operating_mode_set(&m_sensor, lsm303agr::LSM303AGR_NM_10bit);
    accel.xl_full_scale_set(&m_sensor, lsm303agr::LSM303AGR_2g);

    // for(uint8_t i = 1; true; i = ((i << 1) | (i >> 7)))
    // {
    //     accelerometer->UpdateData();
    //     uint16_t pin = (accelerometer->raw_data[0]) << 8;
    //     HAL_GPIO_WritePin(GPIOE, pin, GPIO_PIN_SET);
    //     delay(1000);
    //     HAL_GPIO_WritePin(GPIOE, pin, GPIO_PIN_RESET);
    // }

    while(true)
    {
        read_data(&accel, &m_sensor);
        if (Y > 0)
        {
            led_N.On();
            led_S.Off();
        }
        else
        {
            led_N.Off();
            led_S.On();
        }
        if (X > 0)
        {
            led_W.Off();
            led_E.On();
        }
        else
        {
            led_W.On();
            led_E.Off();
        }
        delay(1000);
    }
}
